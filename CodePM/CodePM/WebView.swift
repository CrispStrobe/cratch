import SwiftUI
import Combine
import ScratchWebKit

// D√©claration de WebView, une vue qui int√®gre un UIViewController via UIViewControllerRepresentable
struct WebView: UIViewControllerRepresentable {
    
    // On r√©cup√®re le contr√¥leur d'alertes depuis l'environnement SwiftUI
    @EnvironmentObject private var alertController: AlertController
    
    // Instanciation d'un contr√¥leur sp√©cifique √† ScratchWeb
    private let webViewController = ScratchWebViewController()
    
    // M√©thode pour cr√©er un coordinateur qui g√®re la communication entre SwiftUI et UIKit
    func makeCoordinator() -> WebView.Coordinator {
        return Coordinator(self)
    }
    
    // Cr√©ation du contr√¥leur UIView pour la vue SwiftUI
    func makeUIViewController(context: Context) -> ScratchWebViewController {
        // On d√©finit le coordinateur comme d√©l√©gu√© du contr√¥leur web
        webViewController.delegate = context.coordinator
        // Chargement d'un fichier HTML local √† partir du r√©pertoire
        webViewController.load(url: FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0].appendingPathComponent("index.html"))
        return webViewController
    }
    
    // M√©thode de mise √† jour du contr√¥leur UIView, obligatoire pour le protocole UIViewControllerRepresentable, mais vide ici car pas de mise √† jour n√©cessaire
    func updateUIViewController(_ uiViewController: ScratchWebViewController, context: Context) {
    }
}

// Extension de WebView pour d√©finir le coordinateur qui g√®re les interactions
extension WebView {
    
    // Coordinator est une classe qui agit en tant que d√©l√©gu√© pour le contr√¥leur ScratchWebViewController
    class Coordinator: NSObject, ScratchWebViewControllerDelegate {
        
        private let parent : WebView
        
        // Initialisation du coordinateur avec la vue WebView parent
        init(_ parent: WebView) {
            self.parent = parent
             }
      
        // M√©thode appel√©e lorsqu'un fichier est t√©l√©charg√©. Un DocumentPicker est pr√©sent√© pour exporter le fichier. Permet de g√©rer l'enregistrement des fichiers dans Scratch.
        func didDownloadFile(at url: URL) {
            let vc = UIDocumentPickerViewController(forExporting: [url])
            vc.shouldShowFileExtensions = true
            parent.webViewController.present(vc, animated: true)
        }
        
        // Autorise ou non le d√©marrage d'une session ScratchLink en fonction du type (Bluetooth LE ou Bluetooth classique)
        func canStartScratchLinkSession(type: SessionType) -> Bool {
            #if DEBUG
            return true
            #else
            return type == .ble //Seul le BLE (Bluetooth Low Energy) est autoris√©
            #endif
        }
        
        // M√©thode appel√©e lorsqu'une session ScratchLink d√©marre
        func didStartScratchLinkSession(type: SessionType) {
            if type == .bt {
                // Si Bluetooth classique est utilis√©, une alerte est affich√©e pour guider l'utilisateur
                parent.alertController.showAlert(howTo: Text("Please pair your Bluetooth device on Settings app before using this extension."))
            }
        }
     
        // M√©thode appel√©e lorsque le d√©marrage d'une session ScratchLink √©choue
        func didFailStartingScratchLinkSession(type: SessionType, error: SessionError) {
            switch error {
            case .unavailable:
                // Alerte indiquant que l'extension n'est pas support√©e
                self.parent.alertController.showAlert(sorry: Text("This extension is not supportedüôáüèª"))
            case .bluetoothIsPoweredOff:
                // Alerte pour indiquer que Bluetooth est √©teint
                self.parent.alertController.showAlert(error: error)
            case .bluetoothIsUnauthorized:
                // Alerte pour informer que l'acc√®s Bluetooth n'est pas autoris√©
                self.parent.alertController.showAlert(unauthorized: Text("Bluetooth"))
            case .bluetoothIsUnsupported:
                // Alerte indiquant que Bluetooth n'est pas support√©
                self.parent.alertController.showAlert(error: error)
            case .other(error: let error):
                // Alerte pour tout autre type d'erreur
                self.parent.alertController.showAlert(error: error)
            }
        }
    }
}
